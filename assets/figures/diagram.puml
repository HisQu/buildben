@startuml
left to right direction
' top to bottom direction

' === Global look & feel =============
skinparam defaultFontSize 20
' skinparam BackgroundColor #00000010
skinparam BackgroundColor transparent

' ======================================
skinparam package {
    RoundCorner 15
    BorderThickness 2
    ' BackgroundColor #00A2FF19
    ' BorderColor #00A2FF
    ' FontColor   #00A2FF
}
skinparam package<<Global Environment>> {
    BackgroundColor #afb20019
    BorderColor #afb200ff
    FontColor   #afb200ff
}
skinparam package<<Virtual Environment>>{
    BackgroundColor #32bc0019
    BorderColor #32bc00ff
    FontColor   #32bc00ff
}
skinparam package<<Directory>> {
    BackgroundColor #00A2FF19
    BorderColor #00A2FF
    FontColor   #00A2FF
}

' ======================================
skinparam class {
    BackgroundColor #cccccc77
    BorderColor     #444444
    BorderThickness 1
    FontStyle bold
    RoundCorner 15
}
skinparam class<<CLI>> {
    BorderColor     #000000
}
skinparam class<<Config>><<Pkg>><<Lock-Files>><<File>><<Lock-File>> {
    BorderColor     #000000
    BorderThickness 0
}

' =====================================================================




' === Package: Global Environment =============
package "Operating System" as GE <<Global Environment>> {

    interface "buildben"      as B   <<CLI>>{
        +init-proj()
        +add-experiment()
    }
    interface "pip / pipx"    as PIP <<CLI>>{
        +install()
    }
    
    interface "just"          as J   <<CLI>>
    interface "Direnv"        as D   <<CLI>>{
        +layout()
        +direnv reload()
        +direnv exec()
    }
    
}

' === Package: Project Directory =============
package "Project Directory" as PDIR <<Directory>> {

    class "pyproject.toml"                          as PPRT <<Config>> {
        +Dependencies
        +Setup Configuration
    }
    
    class "justfile"                                as JF  <<Recipes>> {
        +reset()
        +install-deps()
        +...()
    }
    
    class ".envrc"                                  as ERC  <<Config>>{
        +PROJECT_NAME
        +ENV_VARS
    }
    
    class "requirements.txt \ndev-requirements.txt" as RE   <<Lock-Files>> {
        +Dependencies
        +Versions & Hashes
    }
}

' === Package: Virtual Environment =============
package ".direnv" as VENV <<Virtual Environment>> {
    interface "pip-tools"               as PT  <<Tool>>{
        +pip-compile()
        +pip-sync()
    }
    class "python dependencies"     as PD  <<Pkg>>
    ' VE o-- PD : contains
    
    interface "pip"                     as PIPvenv <<CLI>> {
        +install(editable)
        +uninstall()
    }
}


' =====================================================================

' === Straight Arrows =============

<style>
arrow {
    LineThickness 2.5
    FontStyle italic
    LineColor #afb200ff
    FontColor   #afb200ff
}

</style>

PIP --> B : installs

' =========================

<style>
arrow {
    LineColor #00A2FF
    FontColor #00A2FF
}
</style>

' PT --> PD <<test>> : installs 
B -[thickness=4]-> PDIR : **copies**\n**templates**\n**(cookiecutter)** 
PT  --> RE : compiles\n& syncs
PDIR <-- PIPvenv : editable install

' === SPecial Straight Arrows =============
<style>
arrow {
    LineColor #32bc00ff
    FontColor #32bc00ff
    LineThickness 2.5
}
</style>

' ERC --> PT : installs
PT --> PD : installs
ERC -[thickness=4]-> VENV : **Auto-**\n**creates** \n**& activates**
JF --> VENV : manages


' === Dependencies =============

<style>
arrow {
    LineStyle 10-5
    LineColor #EE220C
    FontColor #EE220C
}
</style>


D   <-- ERC : requires
J   <-- JF  : requires
D   <-- JF  : requires

' JF  --> PT  
PT --> PPRT : requires

PPRT <-- PIPvenv: requires

' ERC -left-  JF     : interacts
' PPRT ..> PT    : read by
@enduml