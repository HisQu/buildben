#!/bin/bash
# --- .envrc from buildben template ---
# !! This script is executes EVERY TIME you enter the directory !!

# === $PATH ===========================================================
# > uv is located there
PATH_add ~/.local/bin


# === New Environment Variables =======================================
# > direnv changes into directory of .envrc and runs subshell, so $PWD is always project root.
export PROJECT_NAME=$(basename "$PWD")
export PROJECT_ROOT=$PWD
# > hard-fail if someone runs pip outside the venv
export PIP_REQUIRE_VIRTUALENV=1
# > Uncomment to pin tool versions
# export PIPX_HOME=$PWD/.build-tools
# > Put the project venv under .direnv/ like your current habit
export UV_PROJECT_ENVIRONMENT="$PWD/.venv"


# === venv ============================================================
# > Create/sync; exit non-zero if lock is violated.
# > Uses Python version specified in pyproject.toml !!
uv sync --frozen # --quiet
# > Activate the venv so plain `python` / `pip` work in terminals & tools
# > uv writes an activation script in the venv site
source "$UV_PROJECT_ENVIRONMENT/bin/activate"



# === Echo env vars & info ============================================
W=24

printf "%-*s  %s\n" $W "--- Info .envrc --------" " -----------------------------------------"
# --- Environment Variables
printf "%*s : %s\n" $W '$PROJECT_NAME' "$PROJECT_NAME"
printf "%*s : %s\n" $W '$PROJECT_ROOT' "$PROJECT_ROOT"
printf "%*s : %s\n" $W '$VIRTUAL_ENV' "$VIRTUAL_ENV"
printf "%*s : %s\n" $W '$PIP_REQUIRE_VIRTUALENV' "$PIP_REQUIRE_VIRTUALENV"
# --- Info
printf "%*s : %s\n" $W "Date" "$(date)"
printf "%*s : %s\n" $W "python" "$(python --version 2>&1) from $(which python)"
printf "%*s : %s\n" $W "pip" "$(pip --version)"
printf "%*s : %s\n" $W "uv" "$(uv --version) from $(which uv)"
printf "%-*s  %s\n" $W "------------------------" " -----------------------------------------"


# === Load further .env files =========================================
dotenv_if_exists ./.secrets.env


# === Source further runtime configs ==================================
# source_env_if_exists ./.my.envrc
# > Fallback
# [[ -f ./.secrets.env ]] && source_env ./.secrets.env