#!/bin/bash
### Template from buildben copied to project_root/.envrc
# !! This script is executes EVERY TIME you enter the directory !!

# === Environment Variables ===========================================
### direnv changes into directory of .envrc and runs subshell, so $PWD is always project root.
export PROJECT_NAME=$(basename "$PWD")
export PROJECT_ROOT=$PWD

# > hard-fail if someone runs pip outside the venv
export PIP_REQUIRE_VIRTUALENV=1

# > Uncomment to pin tool versions
# export PIPX_HOME=$PWD/.build-tools


# === Virtual Environment =============================================
# > Put the project venv under .venv/ like 
export UV_PROJECT_ENVIRONMENT="$PWD/.venv"

# > Create/sync; exit non-zero if lock is violated.
# !! Python version specified in pyproject.toml !!
uv sync --frozen # --quiet

# > Activate the venv so plain `python` / `pip` work in terminals & tools
# > uv writes an activation script in the venv site
source "$UV_PROJECT_ENVIRONMENT/bin/activate"



# === Echo all env vars & info ======================================
echo
echo "=== Project Environment Variables ====="
printf "PROJECT_NAME:  %s\n" "$PROJECT_NAME"
printf "PROJECT_ROOT:  %s\n" "$PROJECT_ROOT"
printf "VIRTUAL_ENV:   %s\n" "$VIRTUAL_ENV"
printf "PIP_REQUIRE_VIRTUALENV: %s\n" "$PIP_REQUIRE_VIRTUALENV"
echo
echo "=== Python Info ======================="
printf "python:        %s\n" "$(python --version 2>&1) from $(which python)"
printf "pip:           %s\n" "$(pip --version)"
printf "uv:            %s\n" "$(uv --version) from  $(which uv)"
echo

# === Secrets =========================================================
[[ -f ./.secrets.env ]] && source_env ./.secrets.env