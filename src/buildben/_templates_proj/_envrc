#!/bin/bash
# --- .envrc from buildben template ---
# !! Requires `direnv` 
# !! This script is executed EVERY TIME you enter the directory !!


# === $PATH ===========================================================
# > uv is located there
PATH_add ~/.local/bin


# === Load .env and .envrc files ======================================
source_env_if_exists ./.env.sh
dotenv_if_exists ./.env
dotenv_if_exists ./.env.secret

# > Fallback
# [[ -f ./.secrets.env ]] && source_env ./.secrets.env


# === venv ============================================================
layout_uv() {
    ### Config uv-managed venv
    export UV_PROJECT_ENVIRONMENT="$PWD/.venv"
    # > Force uv to use managed Python, disallow fallback to system Python
    export UV_MANAGED_PYTHON=1
    
    ### Re-evaluate .envrc when these change
    watch_file pyproject.toml
    watch_file uv.lock
    
    ### Make .venv if not exists
    echo "-- Checking venv ---------------------------------------------------"
    if [[ ! -d "$UV_PROJECT_ENVIRONMENT" ]]; then
        echo "-- 🏗️  Creating .venv at $UV_PROJECT_ENVIRONMENT ..."
        # > --seed: Install `pip`, `setuptools`, and `wheel` into the new venv
        uv venv --seed "$UV_PROJECT_ENVIRONMENT"
        # > --all-extras: Install all optional dependencies (dev, test, docs, ...)
        # > --frozen: Sync from uv.lock without changing it (ignoring the pyproject.toml)
        uv sync --frozen --all-extras
    ### Check for differences
    else
        uv sync --check || echo "⚠️  uv.lock differs from .venv!"
        uv lock --check || echo "⚠️  uv.lock differs from pyproject.toml!"
    fi
    source "$UV_PROJECT_ENVIRONMENT"/bin/activate
}
layout_uv
export PIP_REQUIRE_VIRTUALENV=1 # > hard-fail if someone runs pip outside the venv



# === Echo env vars & info ============================================
W=24
printf "%-*s  %s\n" $W "-- Info ---------------" " -----------------------------------------"
# --- Environment Variables
printf "%*s : %s\n" $W '$PROJECT_NAME' "$PROJECT_NAME"
printf "%*s : %s\n" $W '$PROJECT_ROOT' "$PROJECT_ROOT"
printf "%*s : %s\n" $W '$VIRTUAL_ENV' "$VIRTUAL_ENV"
printf "%*s : %s\n" $W '$PIP_REQUIRE_VIRTUALENV' "$PIP_REQUIRE_VIRTUALENV"
# --- Info
printf "%*s : %s\n" $W "Date" "$(date)"
printf "%*s : %s\n" $W "python" "$(python -S --version 2>&1) from $(which python)"
printf "%*s : %s\n" $W "pip" "$(pip --version)"
printf "%*s : %s\n" $W "uv" "$(uv --version) from $(which uv)"
printf "%-*s  %s\n" $W "------------------------" " -----------------------------------------"


