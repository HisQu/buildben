# ============================================================================
# Justfile for Python projects using uv + pyproject.toml
# ============================================================================
# Why this exists:
# - One command to install exactly what's in uv.lock (safe for CI).
# - A clear, explicit path to re-lock/upgrade when you WANT changes.
# - Optional exports for the "I only understand requirements.txt" crowd.
#
# References (summarized):
# - uv auto-locks by default; --locked disables that and errors if stale. 
# - uv can export a requirements.txt-style file and can also "compile" one.
#   See: uv concepts: lock/sync, uv export, uv pip compile.
#
# Dependencies: uv (and optionally direnv). Python itself is handled by uv.
# =====================================================================

# Let recipes use Bash features and fail-fast in pipelines
set shell := ["bash", "-euo", "pipefail", "-c"]

# Run `just` with no recipe to list tasks
default:
    @just --list

# ---------------------------------------------------------------------
# Internal guards (kept private so they don't clutter `just --list`)
# ---------------------------------------------------------------------
[private]
_note-direnv:
    @if command -v direnv >/dev/null; then \
        test -n "${VIRTUAL_ENV-}" || echo "â„¹ direnv detected but VIRTUAL_ENV not active. Run: direnv allow && direnv reload"; \
    fi

[private]
_check-uv:
    @command -v uv >/dev/null || { \
        echo "âœ— uv not found. Install from https://docs.astral.sh/uv/ then retry." >&2; \
        exit 127; \
    }


# ---------------------------------------------------------------------
# Clean / environment helpers
# ---------------------------------------------------------------------

# Remove transient junk: uv cache,  __pycache__, .pytest_cache, .mypy_cache, .ruff_cache. Does NOT touch uv.lock or your venv.
clean:
    @echo "ðŸ§¹ Cleaning caches and build artifacts..."
    find . -type d -name "__pycache__" -prune -exec rm -rf {} + || true
    rm -rf .pytest_cache .mypy_cache .ruff_cache dist build *.egg-info || true
    uv cache prune -y || true

# If you use direnv-managed venvs, this rebuilds it from scratch. Safe to run even if you don't use direnv; it just no-ops on reload failure.
reset-venv:
    @echo "â™» Rebuilding virtual environment (if present)..."
    rm -rf "$UV_PROJECT_ENVIRONMENT" || true
    direnv reload || true

# ---------------------------------------------------------------------
# Install flows
# ---------------------------------------------------------------------
# Key rule: CI and teammates should *not* relock by accident.
# We therefore install with `--locked` which errors if uv.lock is stale.
# If it errors, you intentionally run `just lock-install` or `just upgrade`.
# > --frozen: Sync from uv.lock while ignoring pyproject.toml
# > --locked: Exit non-zero if pyproject.toml differs from uv.lock

# Install or sync everything from uv.lock into venv. (CI should use this)
sync:
    just _note-direnv
    just _check-uv
    uv sync --all-groups --locked

# ---------------------------------------------------------------------
# Locking and upgrading
# ---------------------------------------------------------------------
# Examples:
#   just lock                   # resolve using current constraints
#   just lock --upgrade         # allow upgrades while resolving
#   just lock --python 3.12     # resolve for a specific interpreter

# Creates uv.lock based on pyproject.toml and exports pylock.toml.
lock *ARGS:
    just _check-uv
    uv lock {{ARGS}}
    uv export -o pylock.toml --quiet

# Re-lock then install from the new lock.
upgrade:
    just lock --upgrade
    uv sync --all-groups --locked
alias up := upgrade


# ---------------------------------------------------------------------
# Convenience
# ---------------------------------------------------------------------

# Example: just run -- python -m yourpkg --help
# Runs your packageâ€™s CLI or module under the locked environment.
run *CMD:
    just _check-uv
    uv run --locked -- {{CMD}}

# Print effective dependency tree (wonâ€™t modify lock when used with --locked)
tree:
    just _check-uv
    uv tree --locked || uv tree

# Show uv + Python info for debugging bug reports
diagnose:
    just _check-uv
    uv --version
    uv python list || true
    uv sync --check



# ---------------------------------------------------------------------
# Example recipe written in python (executes venv/python):
# pyyy:
#     #!/usr/bin/env python3
#     import sys
#     print(sys.executable)
#     print('Hello from python!')